openapi: 3.0.1
info:
  title: Inditex Technical Test
  description: Technical test carried out for Inditex
  contact:
    email: alioth865@yahoo.com
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: brand
    description: Operations related to brand
  - name: product
    description: Operations related to product
  - name: price
    description: Operations related to price
paths:
  /brands:
    get:
      tags:
        - brand
      summary: Get all brands
      operationId: getBrands
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'
  /brands/{brandId}:
    get:
      tags:
        - brand
      summary: Get brand by id
      operationId: getBrandById
      parameters:
        - name: brandId
          in: path
          required: true
          description: Brand identifier
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Brand not found"
  /products:
    get:
      tags:
        - product
      summary: Get all products
      operationId: getProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{productId}:
    get:
      tags:
        - product
      summary: Get product by id
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          required: true
          description: Product identifier
          schema:
            type: integer
            format: int64
            example: 35455
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
  /brand/{brandId}/product/{productId}/price/{dateTime}:
    get:
      tags:
        - price
      summary: Get price of a product in a brand on a specific date
      operationId: getPriceByBrandAndProductAndDate
      parameters:
        - name: brandId
          in: path
          required: true
          description: Brand identifier
          schema:
            type: integer
            format: int64
            example: 1
        - name: productId
          in: path
          required: true
          description: Product identifier
          schema:
            type: integer
            format: int64
            example: 35455
        - name: dateTime
          in: path
          required: true
          description: Date and time of the price
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2}-\d{2}\.\d{2}\.\d{2}$'
            example: "2020-06-14-00.00.00"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request. Please check your input data."
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Price not found"
components:
  schemas:
    Brand:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Zara
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 35455
        name:
          type: string
          example: T-shirt
    PriceResponse:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 35455
        brandId:
          type: integer
          format: int64
          example: 1
        tariffId:
          type: integer
          format: int64
          example: 1
        startDate:
          type: string
          pattern: '^\d{4}-\d{2}-\d{2}-\d{2}\.\d{2}\.\d{2}$'
          example: "2020-06-14-00.00.00"
        endDate:
          type: string
          pattern: '^\d{4}-\d{2}-\d{2}-\d{2}\.\d{2}\.\d{2}$'
          example: "2020-06-14-00.00.00"
        price:
          type: number
          format: double
          example: 35.50